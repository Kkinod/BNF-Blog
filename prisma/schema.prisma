// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isTwoFactorEnabled Boolean  @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    // Added a reverse relation for Post
  comments      Comment[] // Added a reverse relation for Comment
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  slug      String    @unique
  title     String
  desc      String
  img       String?
  views     Int       @default(0)
  isVisible Boolean   @default(true)
  isPick    Boolean   @default(false)
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug])
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

model PasswordResetToken {
  id        String  @id @default(cuid()) @map("_id")
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String  @id @default(cuid()) @map("_id")
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String  @id @default(cuid()) @map("_id")
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Setting {
  id        String  @id @default(cuid()) @map("_id")
  key       String  @unique
  value     String
  updatedAt DateTime @updatedAt
}